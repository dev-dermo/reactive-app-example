{"version":3,"sources":["components/Comments/index.js","pages/Call.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Comments","state","comments","fetch","then","res","json","data","setState","Row","Col","Alert","variant","this","map","comment","key","id","md","Card","Body","Title","name","Text","body","href","email","target","rel","React","Component","Call","getCameraFeed","navigator","mediaDevices","getUserMedia","audio","video","stream","console","log","isCameraEnabled","current","srcObject","context","canvas","getContext","disableCamera","getTracks","forEach","track","stop","handleOnPlay","e","clientWidth","clientHeight","width","height","requestAnimationFrame","step","drawImage","Error","createRef","Jumbotron","className","Button","onClick","lg","onPlay","ref","autoPlay","style","to","process","Home","App","Navbar","bg","Brand","Container","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9cadb3c.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Card, Alert } from 'react-bootstrap'\n\nclass Comments extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tcomments: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/comments?_limit=10')\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcomments: data\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t<h2>Comments:</h2>\n\t\t\t\t\t<Alert variant=\"info\">\n\t\t\t\t\t\tThese comments are loaded with the <code>componentDidMount</code> lifecycle method, which in turn fires off an AJAX <code>fetch</code> request to asynchronously get the comments, update <code>state</code>, and finally render each comment card.\n\t\t\t\t\t</Alert>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t\n\t\t\t<Row>\n\t\t\t\t{this.state.comments.map(comment => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Col key={comment.id} md={12}>\n\t\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t<Card.Title>{comment.name}</Card.Title>\n\t\t\t\t\t\t\t\t\t<Card.Text>\n\t\t\t\t\t\t\t\t\t\t{comment.body}<br />\n\t\t\t\t\t\t\t\t\t\tEmail: <a href={'mailto:' + comment.email} target='_blank' rel='noopener noreferrer'>{comment.email}</a>\n\t\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t);\n\t\t\t\t})}\n      </Row>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default Comments;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Jumbotron, Button } from 'react-bootstrap'\nimport Comments from '../components/Comments';\n\nclass Call extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tisCameraEnabled: false\n\t\t};\n\n\t\tthis.video = React.createRef();\n\t\tthis.canvas = React.createRef();\n\t\tthis.context = null;\n\t}\n\n\tgetCameraFeed = () => {\n\t\tnavigator.mediaDevices\n\t\t\t.getUserMedia({ audio: true, video: true })\n\t\t\t.then((stream) => {\n\t\t\t\tconsole.log(stream);\n\n\t\t\t\tthis.setState({ isCameraEnabled: true });\n\n\t\t\t\tthis.video.current.srcObject = stream;\n\t\t\t\tthis.context = this.canvas.current.getContext('2d');\n\t\t\t})\n\t}\n\n\tdisableCamera = () => {\n\t\tthis.setState({ isCameraEnabled: false });\n\t\tthis.video.current.srcObject.getTracks().forEach(track => track.stop());\n\t};\n\n\thandleOnPlay = (e) => {\n\t\tconst { clientWidth, clientHeight } = e.target;\n\n\t\tthis.canvas.current.width = clientWidth;\n\t\tthis.canvas.current.height = clientHeight;\n\n\t\tconst step = () => {\n\t\t\ttry {\n\t\t\t\tthis.context.drawImage(this.video.current, 0, 0, clientWidth, clientHeight);\n\t\t\t} catch (e) {\n\t\t\t\treturn new Error(e);\n\t\t\t}\n\t\t\trequestAnimationFrame(step);\n\t\t}\n\t\trequestAnimationFrame(step)\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Jumbotron className='text-center'>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{!this.state.isCameraEnabled ?\n\t\t\t\t\t\t\t\t\t<Button variant='success' onClick={this.getCameraFeed}>Enable Camera</Button> :\n\t\t\t\t\t\t\t\t\t<Button variant='warning' onClick={this.disableCamera}>Disable Camera</Button>}\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col lg={6}>\n\t\t\t\t\t\t\t\t\t<h3>Video Element</h3>\n\t\t\t\t\t\t\t\t\t<video  onPlay={this.handleOnPlay} ref={this.video} width='100%' height='auto' id='canvas' autoPlay></video>\n\t\t\t\t\t\t\t\t\t<p>This is a <code>video</code> element streaming directly from the webcam.</p>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<Col lg={6}>\n\t\t\t\t\t\t\t\t\t<h3>Canvas Element</h3>\n\t\t\t\t\t\t\t\t\t<canvas ref={this.canvas} style={{ width: '100%', height: 'auto' }}></canvas>\n\t\t\t\t\t\t\t\t\t<p>This is a <code>canvas</code> element being recursively 'painted' from the video.</p>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Link to={process.env.PUBLIC_URL + '/'}>Back to Home</Link>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Jumbotron>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t\n\t\t\t\t<Comments />\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default Call;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Jumbotron } from 'react-bootstrap';\n\nfunction Home() {\n\treturn(\n\t\t<Row>\n\t\t\t<Col>\n\t\t\t\t<Jumbotron className='text-center'>\n\t\t\t\t\t<h1>Welcome to my reactive app</h1>\n\t\t\t\t\t<p>The button below will use React Router to direct the user to <code>/call</code>,<br />\n\t\t\t\t\twhich in turn will load the relevant component without any requests being sent from the page.</p>\n\t\t\t\t\t\n\t\t\t\t\t<Link className='btn btn-info' to={process.env.PUBLIC_URL + '/call'}>JOIN</Link>\n\t\t\t\t</Jumbotron>\n\t\t\t</Col>\n\t\t</Row>\n\t);\n}\n\nexport default Home;","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Container, Navbar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Call from './pages/Call';\nimport Home from './pages/Home';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n    <Navbar bg='dark' variant='dark'>\n      <Navbar.Brand className='mr-auto' href='https://github.com/diarmuid-murphy/' target='_blank'>\n        Teachee\n      </Navbar.Brand>\n\n      <Navbar.Text className='mr-sm-2'>\n        Created by Diarmuid Murphy\n      </Navbar.Text>\n    </Navbar>\n\n    <Container>\n      <Router>\n        <Switch>\n          <Route exact path={process.env.PUBLIC_URL + '/call'} component={Call} />\n          <Route path={process.env.PUBLIC_URL + '*'} component={Home} />\n        </Switch>\n      </Router>\n    </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}